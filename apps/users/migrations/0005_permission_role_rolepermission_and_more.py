# Generated by Django 4.2.7 on 2025-08-09 01:02

from django.db import migrations, models
import django.db.models.deletion


def create_roles_and_permissions(apps, schema_editor):
    """
    Create initial roles and permissions with comprehensive permission set
    """
    Role = apps.get_model("users", "Role")
    Permission = apps.get_model("users", "Permission")
    RolePermission = apps.get_model("users", "RolePermission")

    # Create Roles
    user_role = Role.objects.create(
        name="user",
        description="Regular user with basic permissions for social media interactions",
        is_active=True,
    )

    admin_role = Role.objects.create(
        name="admin",
        description="Administrator with full system access and management capabilities",
        is_active=True,
    )

    # Create comprehensive permissions
    permissions_data = [
        # User permissions
        ("user:create", "Create User", "user", "create", "Create new user accounts"),
        (
            "user:read",
            "Read User",
            "user",
            "read",
            "View user profiles and information",
        ),
        (
            "user:update",
            "Update User",
            "user",
            "update",
            "Update user profiles and information",
        ),
        ("user:delete", "Delete User", "user", "delete", "Delete user accounts"),
        ("user:list", "List Users", "user", "list", "View list of users"),
        (
            "user:profile_update",
            "Update User Profile",
            "user",
            "profile_update",
            "Update own profile information",
        ),
        (
            "user:profile_view",
            "View User Profile",
            "user",
            "profile_view",
            "View user profile details",
        ),
        # Post permissions
        ("post:create", "Create Post", "post", "create", "Create new posts"),
        ("post:read", "Read Post", "post", "read", "View posts"),
        ("post:update", "Update Post", "post", "update", "Edit existing posts"),
        ("post:delete", "Delete Post", "post", "delete", "Delete posts"),
        ("post:list", "List Posts", "post", "list", "View list of posts"),
        ("post:moderate", "Moderate Post", "post", "moderate", "Moderate post content"),
        (
            "post:feature",
            "Feature Post",
            "post",
            "feature",
            "Feature posts on platform",
        ),
        ("post:archive", "Archive Post", "post", "archive", "Archive posts"),
        # Comment permissions
        (
            "comment:create",
            "Create Comment",
            "comment",
            "create",
            "Create comments on posts",
        ),
        ("comment:read", "Read Comment", "comment", "read", "View comments"),
        (
            "comment:update",
            "Update Comment",
            "comment",
            "update",
            "Edit existing comments",
        ),
        ("comment:delete", "Delete Comment", "comment", "delete", "Delete comments"),
        ("comment:list", "List Comments", "comment", "list", "View list of comments"),
        (
            "comment:moderate",
            "Moderate Comment",
            "comment",
            "moderate",
            "Moderate comment content",
        ),
        (
            "comment:reply",
            "Reply to Comment",
            "comment",
            "reply",
            "Reply to existing comments",
        ),
        # Like permissions
        ("like:create", "Create Like", "like", "create", "Like posts"),
        ("like:delete", "Delete Like", "like", "delete", "Remove likes from posts"),
        ("like:view", "View Likes", "like", "view", "View post likes"),
        # Share permissions
        ("share:create", "Create Share", "share", "create", "Share posts"),
        ("share:delete", "Delete Share", "share", "delete", "Remove shares from posts"),
        ("share:view", "View Shares", "share", "view", "View post shares"),
        # Follow permissions
        ("follow:create", "Create Follow", "follow", "create", "Follow other users"),
        ("follow:delete", "Delete Follow", "follow", "delete", "Unfollow users"),
        ("follow:view", "View Follows", "follow", "view", "View follow relationships"),
        (
            "follow:list",
            "List Follows",
            "follow",
            "list",
            "View followers and following lists",
        ),
        # Media permissions
        (
            "media:upload",
            "Upload Media",
            "media",
            "upload",
            "Upload images and media files",
        ),
        ("media:delete", "Delete Media", "media", "delete", "Delete media files"),
        ("media:view", "View Media", "media", "view", "View media content"),
        # Admin permissions
        (
            "admin:access",
            "Admin Access",
            "admin",
            "access",
            "Access admin panel and features",
        ),
        (
            "admin:user_manage",
            "Manage Users",
            "admin",
            "user_manage",
            "Manage user accounts and profiles",
        ),
        ("admin:user_ban", "Ban Users", "admin", "user_ban", "Ban user accounts"),
        (
            "admin:user_unban",
            "Unban Users",
            "admin",
            "user_unban",
            "Unban user accounts",
        ),
        (
            "admin:content_moderate",
            "Moderate Content",
            "admin",
            "content_moderate",
            "Moderate posts and comments",
        ),
        (
            "admin:content_delete",
            "Delete Any Content",
            "admin",
            "content_delete",
            "Delete any content on platform",
        ),
        (
            "admin:activity_view",
            "View Activity Logs",
            "admin",
            "activity_view",
            "View system activity logs",
        ),
        (
            "admin:activity_export",
            "Export Activity Logs",
            "admin",
            "activity_export",
            "Export activity logs",
        ),
        (
            "admin:system_config",
            "System Configuration",
            "admin",
            "system_config",
            "Configure system settings",
        ),
        (
            "admin:role_manage",
            "Manage Roles",
            "admin",
            "role_manage",
            "Manage user roles and permissions",
        ),
        (
            "admin:permission_manage",
            "Manage Permissions",
            "admin",
            "permission_manage",
            "Manage system permissions",
        ),
        (
            "admin:analytics_view",
            "View Analytics",
            "admin",
            "analytics_view",
            "View platform analytics",
        ),
        (
            "admin:backup_create",
            "Create Backups",
            "admin",
            "backup_create",
            "Create system backups",
        ),
        (
            "admin:backup_restore",
            "Restore Backups",
            "admin",
            "backup_restore",
            "Restore system from backups",
        ),
    ]

    # Create permission objects
    permission_objects = {}
    for codename, name, resource, action, description in permissions_data:
        permission = Permission.objects.create(
            name=name,
            codename=codename,
            description=description,
            resource=resource,
            action=action,
        )
        permission_objects[codename] = permission

    # Define permission sets for each role

    # Basic user permissions - what regular users can do
    user_permissions = [
        # Users
        "user:read",
        "user:update",
        "user:profile_view",
        "user:profile_update",
        # Posts
        "post:create",
        "post:read",
        "post:list",
        # Comments
        "comment:create",
        "comment:read",
        "comment:list",
        "comment:reply",
        # Likes
        "like:create",
        "like:delete",
        "like:view",
        # Shares
        "share:create",
        "share:delete",
        "share:view",
        # Follows
        "follow:create",
        "follow:delete",
        "follow:view",
        "follow:list",
        # Media
        "media:upload",
        "media:view",
        # Notifications
        "notification:read",
        "notification:mark_read",
    ]

    # Admin permissions - full access
    admin_permissions = list(permission_objects.keys())  # All permissions

    # Assign permissions to user role
    for codename in user_permissions:
        if codename in permission_objects:
            RolePermission.objects.create(
                role=user_role, permission=permission_objects[codename]
            )

    # Assign all permissions to admin role
    for permission in permission_objects.values():
        RolePermission.objects.create(role=admin_role, permission=permission)

    print(f"Created {len(permissions_data)} permissions")
    print(f"Assigned {len(user_permissions)} permissions to 'user' role")
    print(f"Assigned {len(permission_objects)} permissions to 'admin' role")


def reverse_create_roles_and_permissions(apps, schema_editor):
    """
    Remove initial roles and permissions
    """
    Role = apps.get_model("users", "Role")
    Permission = apps.get_model("users", "Permission")
    RolePermission = apps.get_model("users", "RolePermission")

    # Delete all role permissions
    RolePermission.objects.all().delete()

    # Delete all permissions
    Permission.objects.all().delete()

    # Delete all roles
    Role.objects.all().delete()

    print("Removed all roles, permissions, and role permissions")


class Migration(migrations.Migration):

    dependencies = [
        ("users", "0004_otp_alter_follow_unique_together_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Permission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                (
                    "codename",
                    models.CharField(db_index=True, max_length=100, unique=True),
                ),
                ("description", models.TextField(blank=True)),
                ("resource", models.CharField(db_index=True, max_length=50)),
                ("action", models.CharField(db_index=True, max_length=50)),
            ],
            options={
                "db_table": "permissions",
                "ordering": ["resource", "action"],
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(db_index=True, max_length=50, unique=True)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "db_table": "roles",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="RolePermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "permission",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="role_permissions",
                        to="users.permission",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="role_permissions",
                        to="users.role",
                    ),
                ),
            ],
            options={
                "db_table": "role_permissions",
            },
        ),
        migrations.AddIndex(
            model_name="permission",
            index=models.Index(
                fields=["resource", "action"], name="permissions_resourc_2eec83_idx"
            ),
        ),
        migrations.AddField(
            model_name="userprofile",
            name="role",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="users",
                to="users.role",
            ),
        ),
        migrations.AddIndex(
            model_name="rolepermission",
            index=models.Index(
                fields=["role", "permission"], name="role_permis_role_id_29a93b_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="rolepermission",
            constraint=models.UniqueConstraint(
                fields=("role", "permission"), name="unique_role_permission"
            ),
        ),
        # create initial roles and permissions
        migrations.RunPython(
            create_roles_and_permissions, reverse_create_roles_and_permissions
        ),
    ]
